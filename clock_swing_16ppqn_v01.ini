[droid]
    ledbrightness = 0.5

[p2b8]
[p2b8]
[p10]

### I use a midi sequencer to run my modular
[midiin]
	start = _reset
	running = _running

### input clock with 4 PPQN and swing
[clocktool]
	clock = I1
	inputpitch = _clock_cv

### On start up or every time you change the swing amount, press this button for about 2 seconds to evaluate min and max frequencies of the swung input clock. In the first 0.5 sec, any old frequencies are cleared from the buffer. After this the new frequencies are learned and saved.
[button]
	button = B2.3
	states = 1
	output = _learn
[gatetool]
	inputtrigger = _learn
	gatelength = 0.5
	outputgate = _clear
[copy]
	input = 1 - _clear
	output = _clear_inv

### evaluate high frequency
[compare]
	input = _clock_cv
	compare = _clock_cv_max
	ifgreater = _clock_cv
	else = _clock_cv_max
	output = _evaluated_max
[copy]
	input = _evaluated_max * _clear_inv
	output = _clock_cv_max

### evaluate low frequency
[compare]
	input = 1 - _clock_cv
	compare = _clock_cv_min
	ifgreater = 1 - _clock_cv
	else = _clock_cv_min
	output = _evaluated_min
[compare]
	input = _evaluated_min
	compare = 1
	ifequal = 0
	else = _evaluated_min * _clear_inv
	output = _clock_cv_min
[compare]
	input = _clock_cv_min
	compare = 0
	ifequal = 1
	else = _clock_cv_min
	output = _clock_cv_min_out

### sample the high and low frequencies (learning)
[sample]
	input = _clock_cv_max
	gate = _learn
	output = _clock_cv_max_lfo
[sample]
	input = 1 - _clock_cv_min_out
	gate = _learn
	output = _clock_cv_min_lfo

[flipflop]
	reset = _reset
	toggle = I1
	output = _clock_div2_flip
[copy]
	input = _clock_div2_flip * _running
	output = _clock_div2_steady

### slow lfo
[lfo]
	rate = _clock_cv_min_lfo + 0.2 # Every 1V (0.1) added here doubles the lfo rate. I add 2V, which leads to an increase in the rate by a factor of 4 and thus changes the resolution from 4 to 16 PPQN.
	pulsewidth = 0.1
	sync = _clock_div2_steady
	output = _lfo_min
[nudge]
	clear = _clock_div2_steady + _reset
	minimum = 1
	maximum = 5 # since I intend a 16 PPQN resolution, the slow and fast lfos shall alternate every 4 ticks
	amount = 1
	buttonup = _lfo_min
	dontsave = 1
	output = _nudge_min
[compare]
	input = _nudge_min
	compare = 5
	ifequal = 1
	else = 0
	output = _reset_max
[compare]
	input = _nudge_min
	compare = 5
	ifless = 1
	else = 0
	output = _lfo_min_on
[copy]
	input = 1 - _lfo_min_on
	output = _lfo_min_off

### fast lfo
[lfo]
	rate = _clock_cv_max_lfo + 0.2
	pulsewidth = 0.1
	sync = _reset_max
	output = _lfo_max

### output clock with 16 PPQN and swing
[mixer]
	input1 = _lfo_min * _lfo_min_on
	input2 = _lfo_max * _lfo_min_off
	output = _mix_out
[copy]
	input = _mix_out * _running
	output = O1
